FINMARC --> MARC 21 (RDA)
19.1.2017 - Kansalliskirjasto / TV

#define version 317

#define macro Pvalimerkitys()         | If (PreviousSubIn(S, $p, '=1') = 'n') ReplaceOcc ('$p' By ',$p', '=1') Else ReplaceOcc ('$p' By '.$p', '=1'); \
                                        If (PreviousSubIn(S, $p, '=2') = 'n') ReplaceOcc ('$p' By ',$p', '=2') Else ReplaceOcc ('$p' By '.$p', '=2'); \
                                        If (PreviousSubIn(S, $p, '=3') = 'n') ReplaceOcc ('$p' By ',$p', '=3') Else ReplaceOcc ('$p' By '.$p', '=3')

#define macro KAANNOKSET | RegReplace('diagrs\\.', 'diagrams', 'g'); \
                           RegReplace('incl\\.', 'includes', 'g'); \
                           RegReplace('fold(\\.)* maps', 'folded maps', 'g'); \
                           RegReplace('online resource', 'verkkoaineisto', 'g'); \
                           RegReplace('approximately', 'noin', 'g'); \
                           RegReplace('\\bmin\\.|\\bmin\\b|minutes', 'minuuttia', 'g'); \
                           RegReplace('unnumbered', 'numeroimatonta', 'g'); \
                           RegReplace('color illustrations\\b|col\\. ill\\.', 'värikuvitus', 'g'); \
                           RegReplace('chiefly color illustrations', 'pääosin värikuvitettu', 'g'); \
                           RegReplace('ill\\b|illus(\\.|trated)|illustrations', 'kuvitettu', 'g'); \
                           RegReplace('black and white', 'mustavalkoinen', 'g'); \
                           RegReplace('\\s\\(some col\\.\\)', '', 'g'); \
                           RegReplace('\\bcharts\\b', 'kaavioita', 'g'); \
                           RegReplace('\\bports\\.|\\bportraits', 'muotokuvia', 'g'); \
                           RegReplace('illustration\\b', 'kuvitus', 'g'); \
                           RegReplace('p\\. of plates|leaves of plates', 'kuvalehteä', 'g'); \
                           RegReplace('1 v\\.', '1 nide', 'g'); \
                           RegReplace('insert\\b', 'liite', 'g'); \
                           RegReplace('inserts', 'liitteitä', 'g'); \
                           RegReplace('videodiscs', 'videolevyä', 'g'); \
                           RegReplace('videodisc', 'videolevy', 'g'); \
                           RegReplace('(sound|audio) discs', 'äänilevyä', 'g'); \
                           RegReplace('sound disc', 'äänilevy', 'g'); \
                           RegReplace('ca\\.', 'noin', 'g'); \
                           RegReplace('digital\\b', 'digitaalinen', 'g'); \
                           RegReplace('analog\\b', 'analoginen', 'g'); \
                           RegReplace('folded sheet', 'taitelehti', 'g'); \
                           RegReplace('map\\b', 'kartta', 'g'); \
                           RegReplace('1 hr\\.', '1 tunti', 'g'); \
                           RegReplace('unpaged', 'ei sivunumerointia', 'g'); \
                           RegReplace('\\bhr\\.', 'tuntia', 'g'); \
                           RegReplace('sound cassettes', 'äänikasettia', 'g'); \
                           RegReplace('maps|\\bkartt\\.', 'karttoja', 'g'); \
                           RegReplace('sd\\., col\\.', 'äänellinen, värillinen', 'g'); \
                           RegReplace('\\s\\(chiefly color\\)|\\s\\(chiefly col\\.\\)', '', 'g'); \
                           RegReplace('chiefly color\\b|chiefly col\\.', 'pääosin värillisiä', 'g'); \
                           RegReplace('\\b[Ss]\\.|pages|\\bp\\.|\\bp\\b', 'sivua', 'g'); \
                           RegReplace('chiefly', 'pääosin', 'g'); \
                           RegReplace('\\bnid\\.|\\bnid[^A-Za-z]+|\\bhft[^A-Za-z]+|\\bhft\\.|\\bNID\\.|\\bnid\\.', 'nidottu', 'g'); \
                           RegReplace('\\bpbk[^A-Za-z]+|\\bpbk\\.', 'nidottu', 'g'); \
                           RegReplace('\\bhbk[^A-Za-z]+|\\bhbk\\.|\\binb[^A-Za-z]+|\\binb\\.|\\bsid\\.|\\bSID\\.', 'sidottu', 'g'); \
                           RegReplace('\\bverkkojulk\\b|\\bverkkojulk\\.|electronic bk\\.', 'verkkoaineisto', 'g'); \
                           RegReplace('kuv\\.|KUV\\.', 'kuvitettu', 'g'); \
                           RegReplace('IMPR\\b', 'impr', 'g'); \
                           RegReplace('mv\\.', 'mustavalkoinen', 'g'); \
                           RegReplace('vär\\.', 'värillinen', 'g'); \
                           RegReplace('värikuv\\.', 'värikuvitus', 'g'); \
                           RegReplace('nuott\\.', 'nuotteja', 'g'); \
                           RegReplace('kuval\\.', 'kuvalehteä', 'g'); \
                           RegReplace('\\bCM', 'cm', 'g'); \
                           RegReplace('diagrs\\.', 'diagrams', 'g'); \
                           RegReplace('incl\\.', 'includes', 'g'); \
                           RegReplace('fold(\\.)* maps', 'folded maps', 'g'); \
                           RegReplace('(\\d+) irtol\\.', '\\1 irtolehteä'); \
                           Replace('kuvas.' By 'kuvasivua'); \
                           RegReplace('([^0-9]) (taul[.,])', '\\1 taulukkoja', 'g'); \
                           RegReplace('\\btaul\\.', 'taulukkoja', 'g'); \
                           RegReplace('hakem\\.|hakem(\$|\\b)', 'hakemisto', 'g'); \
                           RegReplace('lyh\\. luett\\.', 'lyhenneluettelo', 'g'); \
                           RegReplace('lähdel\\.|lähdel(\$|\\b)', 'lähdeluettelo', 'g'); \
                           RegReplace('liitel\\.|liitel(\$|\\b)', 'liiteluettelo', 'g'); \
                           RegReplace('(\\d*) taul\\.', '\\1 taulukkoa', 'g'); \
                           RegReplace('(\\d*) karttal\\.', '\\1 karttaliitettä', 'g'); \
                           RegReplace('\\] kuvas\\.|\\] kuvas(\$|\\b)', '] kuvasivua', 'g'); \
                           RegReplace('1 liites\\.|1 liites(\$|\\b)', '1 liitesivu', 'g'); \
                           RegReplace('liites\\.|liites(\$|\\b)', 'liitesivua', 'g'); \
                           RegReplace('liitt\\.', 'liitteitä', 'g'); \
                           RegReplace('[Vv]erkkokirja', 'verkkoaineisto', 'g')

000/1-5     | 000/1-5     | S
000/6/      | 000/6/      | 'n'
000/7-9     | 000/7-9/    | S
000/10/     | 000/10/     | 'a'
000/11-17/  | 000/11-17/  | S
000/18/	    | 000/18/     | '4'
000/19/	    | 000/19/	  | 'i'
000/20-24/  | 000/20-24/  | S

#if (@007/1-2/ != 'tu')
007        | 007        | S; RegReplace(' ', '|')
#endif

008   | 008    | S
008/16-18/ | 008/16-18/ | Table ('008-15-maakoodit.tbl')
008/36-38/ | 008/36-38/ | Table ('008-35-kielikoodit.tbl')
008/40/ | 008/40/ | 'c'

// TEKSTIAINEISTO JA TEKSTIKÄSIKIRJOITUS

#if ((@000/7/ = 'a' Or @000/7/ = 't') And (Not Exists(@245$h)) And Not Exists(@336))
008/24/         | 008/24/         | S

008/24/         | 336(new)$a      | If (S = 'f') Then 'taktiili teksti' Else 'teksti'
008/24/         | 336(newest)$b   | If (S = 'f') Then 'tct' Else 'txt'
008/24/         | 336(newest)$2   | 'rdacontent'

008/24/         | <A37$a          | Table('008-23-337a.tbl')
A37$a           | 337(new)$a      | S
A37$a           | 337(newest)$b   | Table('337_b.tbl')
A37$a           | 337(newest)$2   | 'rdamedia'

008/24/         | <A38$a          | Table('008-23-338a.tbl')
A38$a           | 338(new)$a      | S
A38$a           | 338(newest)$b   | Table('338_b.tbl')
A38$a           | 338(newest)$2   | 'rdacarrier'
#endif

#if ((@000/7/ = 'a' Or @000/7/ = 't') And Exists(@245$h) And (Exists (@007)) And (Not Exists(@336)) And (RegFind(@245$h, '[Mm]ultimedia') <0))
007/1/          | 007/1/          | S
007/1/          | <A36            | Table ('007-336a.tbl')

A36             | 336(new)$a      | S
A36             | 336(newest)$b   | Table('336_b.tbl')
A36             | 336(newest)$2   | 'rdacontent'

007/1/          | <A37            | If (RegFind(@245$h, '[Mm]ultimedia') <0) Then Table('007-337a.tbl')

A37             | 337(new)$a      | S
A37             | 337(newest)$b   | Table('337_b.tbl')
A37             | 337(newest)$2   | 'rdamedia'
#endif

// NUOTTIJULKAISU JA NUOTTIKÄSIKIRJOITUS

#if (@000/7/ = 'c' Or @000/7/ = 'd'  And Not Exists(@336))
008/24/         | 008/24/         | S
008/24/         | 336(new)$a      | If (S != 'f') Then 'nuottikirjoitus' Else 'taktiili nuottikirjoitus'
008/24/         | 336(newest)$b   | If (S != 'f') Then 'ntm' Else 'tcm'
008/24/         | 336$2           | 'rdacontent'

008/24/         | <B37$a          | Table ('008-24-337a.tbl')
B37$a           | 337(new)$a      | S
B37$a           | 337(newest)$b   | Table ('337_b.tbl')

B37$a           | 337(newest)$2   | 'rdamedia'

008/24/         | 338(new)$a      | 'nide'
008/24/         | 338(newest)$b   | 'nc'
008/24/         | 338(newest)$2   | 'rdacarrier'
#endif

// KARTTA-AINEISTO JA KARTTAKÄSIKIRJOITUS

#if (@000/7/ = 'e' Or @000/7/ = 'f' And Not Exists(@336))
007/1-2		| 007/1-2/	  | S

007/1/          | <C36$a          | If (S = 'a' and @007/2/ != 'q' and @008/30/ = 'f') Then 'kartografinen taktiili kuva'

008/26/         | 008/26/         | S
008/26/         | <C36$a          | If ((S != 'd') And (C36$a != 'kartografinen taktiili kuva')) Then 'kartografinen kuva' Else 'kartografinen kolmiulotteinen muoto'

C36$a           | 336(new)$a      | S
C36$a           | 336(newest)$b   | Table ('336_b.tbl')
C36$a           | 336(newest)$2   | 'rdacontent'

008/30/         | 008/30/         | S

008/30/         | <C37$a          | Table ('008-29-337a.tbl')
C37$a           | 337(new)$a      | S
C37$a           | 337(newest)$b   | Table ('337_b.tbl')
C37$a           | 337(newest)$2   | 'rdamedia'
#endif


// HEIJASTETTAVA KUVA TAI VIESTIN

#if (@000/7/ = 'g') And (@007/1/ = 'g' Or @007/1/ = 'm' Or @007/1/ = 'v' Or @007/1/ = 'c') And (Not Exists(@336))
007/1/          | 007/1/          | S

007/1/          | <H36$a          | If (S = 'g') Then 'stillkuva' Else 'kaksiulotteinen liikkuva kuva'
H36$a           | 336(new)$a      | S
H36$a           | 336(newest)$b   | Table ('336_b.tbl')
H36$a           | 336(newest)$2   | 'rdacontent'

007/1/          | <H37$a          | Table ('007-0-337a-heijastettava.tbl')
H37$a           | 337(new)$a      | S
H37$a           | 337(newest)$b   | Table ('337_b.tbl')
H37$a           | 337(newest)$2   | 'rdamedia'
#endif

// PUHEÄÄNITE

#if (@000/7/ = 'i') And (Not Exists(@336))

000             | <D36$a          | 'puhe'
D36$a           | 336(new)$a      | S
D36$a           | 336(newest)$b   | Table ('336_b.tbl')
D36$a           | 336(newest)$2   | 'rdacontent'

007/1/          | 007/1/          | S
007/1/          | <D37$a          | If (S = 'c') Then 'tietokonekäyttöinen' Else 'audio'

D37$a           | 337(new)$a      | S
D37$a           | 337(newest)$b   | Table ('337_b.tbl')
D37$a           | 337(newest)$2   | 'rdamedia'
#endif

// MUSIIKKIÄÄNITE

#if (@000/7/ = 'j') And (Not Exists(@336))

000             | <E36$a          | 'esitetty musiikki'
E36$a           | 336(new)$a      | S
E36$a           | 336(newest)$b   | Table ('336_b.tbl')
E36$a           | 336(newest)$2   | 'rdacontent'

007/1/          | 007/1/          | S
007/1/          | <E37$a          | If (S = 's') Or (RegFind(@245$h, 'nite') >= 0) Then 'audio' Else 'tietokonekäyttöinen'

E37$a           | 337(new)$a      | S
E37$a           | 337(newest)$b   | Table ('337_b.tbl')
E37$a           | 337(newest)$2   | 'rdamedia'
#endif

// KUVA

#if (@000/7/ = 'k'  And Not Exists(@336))
007/1/          | 007/1/          | S

007/1/          | <G36$a          | If (S = 'k' and @008 = 'f') Then 'taktiili kuva' Else 'stillkuva'
G36$a           | 336(new)$a      | S
G36$a           | 336(newest)$b   | Table ('336_b.tbl')
G36$a           | 336(newest)$2   | 'rdacontent'

008/30/         | 008/30/         | S
008/30/         | 337(new)$a      | If (S = ' ' or S = '|' or S = 'f' or S = 'r') Then 'käytettävissä ilman laitetta'
008/30/         | 337(new)$a      | If (S = 'a' or S = 'b' or S = 'c') Then 'mikromuoto'
008/30/         | 337(new)$a      | If (S = 'o' or S = 'q' or S = 's') Then 'tietokonekäyttöinen'
#endif

// ELEKTRONINEN AINEISTO

#if (@000/7/ = 'm') And (Not Exists(@336))
008/27/         | 008/27/         | S

008/27/         | <F36$a          | Table ('008-26-336a.tbl')
F36$a           | 336(new)$a      | S
F36$a           | 336(newest)$b   | Table ('336_b.tbl')
F36$a           | 336(newest)$2   | 'rdacontent'

008/27/         | <F37$a          | 'tietokonekäyttöinen'
F37$a           | 337$a           | S
F37$a           | 337$b           | Table ('337_b.tbl')
F37$a           | 337$2           | 'rdamedia'
#endif

// MONIVIESTIN JA SEKALAINEN AINEISTO

#if (@000/7/ = 'p'  And Not Exists(@336))
000/7/          | 000/7/          | S
000/7/          | 336(new)$a      | 'muu'
000/7/          | 337(new)$a      | 'muu'
#endif

#if (RegFind(@245$h, '[Mm]ultimedia') >=0) Or (RegFind(@245$h, '[Kk]it') >=0) And Not Exists(@336)
000/7/          | 000/7/          | 'o'
000/7/          | 336(new)$a      | 'muu'
000/7/          | 337(new)$a      | 'muu'
#endif

// ESINE

#if (@000/7/ = 'r') And (Not Exists(@336))
008/34/         | 008/34/         | S
008/34/         | <G36$a          | 'kolmiulotteinen muoto'

G36$a           | 336(new)$a      | S
G36$a           | 336(newest)$b   | Table ('336_b.tbl')
G36$a           | 336(newest)$2   | 'rdacontent'

008/34/         | <G37$a          | If (S = 'p') Then 'mikroskooppinen' Else 'käytettävissä ilman laitetta'
G37$a           | 337(new)$a      | S
G37$a           | 337(newest)$b   | Table ('337_b.tbl')
G37$a           | 337(newest)$2   | 'rdamedia'
#endif

010I1 | <DELI1 | S
010I2 | <DELI2 | S
010   | <DEL   | S

012I1 | <DELI1 | S
012I2 | <DELI2 | S 
012   | <DEL   | S

014I1 | <DELI1 | S
014I2 | <DELI2 | S
014   | <DEL   | S

015I1 | <DELI1 | S
015I2 | <DELI2 | S
015   | <DEL   | S

016I1 | <DELI1 | S
016I2 | <DELI2 | S
016   | <DEL   | S

019I1 | <DELI1 | S
019I2 | <DELI2 | S
019   | <DEL   | S

020I1 | 020I1  | S
020I2 | 020I2  | S
020$a | 020$a  | S; RegReplace('[\\s](.*)', ''); KAANNOKSET
020$a | 020$q  | If (RegFind(@020$a, '\\(') >= 0) Then S; RegReplace('(.*)\\(', ''); RegReplace('\\)', ''); KAANNOKSET
020$c | <DEL   | S
020$q | 020$q  | S; RegReplace('\\(', ''); RegReplace('\\)', ''); KAANNOKSET
020$z | 020$z  | S; RegReplace('[\\s](.*)', ''); KAANNOKSET
020$z | 020$q  | If (RegFind(@020$z, '\\(') >= 0) Then S; RegReplace('(.*)\\(', ''); RegReplace('\\)', ''); KAANNOKSET

021I1             | <P20I1          | ' '
021I2             | <P20I2          | ' '
021$a             | <P20$a          | S
021$c             | <P20$a          | +' (' +S +')'
021$d             | <P20$c          | S
021$e             | <P20$c          | If Exists ($d) Then ($d+', ' + S) Else S
021$z             | <P20$z          | S
P20               | 020(new)        | S;
                                      Replace ('$c' By ' :$c', Strict)
022I1           | 022I1           | If (I1=0 Or I1=1) Then S Else ' '
022I2           | 022I2           | ' '
022             | 022             | S

024I1           | 024I1           | '0'
024I2           | 024I2           | ' '
024             | 024             | S

025I1 | <DELI1 | S
025I2 | <DELI2 | S
025   | <DEL   | S

028I1 | 028I1  | S
028I2 | 028I2  | S
028   | 028    | S
028   | 028    | Sort('baq56789')

029I1 | <DELI1 | S
029I2 | <DELI2 | S
029   | <DEL   | S

032I1 | <DELI1 | S
032I2 | <DELI2 | S
032   | <DEL   | S

035I1 | 035I1  | ' '
035I2 | 035I2  | ' '
035$a | 035$a  | S

036I1 | <DELI1 | S
036I2 | <DELI2 | S
036   | <DEL   | S

037I1 | <DELI1 | S
037I2 | <DELI2 | S
037   | <DEL   | S

038I1 | <DELI1 | S
038I2 | <DELI2 | S
038   | <DEL   | S

040I1 | 040I1  | ' '
040I2 | 040I2  | ' '
040$c | 040$a  | S
040$b | 040$b  | 'mul'

#if (Not Exists(@040$b))
000   | 040$b  | 'mul'
#endif

040   | 040    | Sort('abed')

#if ( (@008/36-38/ != '   ') And (@008/36-38/ != '|||') And Not (Exists(@041)) )
008        | 041I1  | '0'
008        | 041I2  | ' '
008/36-38/ | 041$a  | If (InTable('008-35-kielikoodit.tbl') Then Table ('008-35-kielikoodit.tbl')
#endif

#if (Exists(@041))
041I1           | 041I1           | If (I1=' ') Then '0' Else S
041I2           | 041I2           | ' '
041$a/1-3/(n=1) | 008/36-38/      | If (n=1) Then Table ('041-kielikoodit.tbl') 
041$a           | <D41$a(no)      | Sto(0); RegFind('^(.{1,3})'); RegMatch(1); Redo; Mem(0); From(4)
041$a           | <D41$d(no)      | Sto(0); RegFind('^(.{1,3})'); RegMatch(1); Redo; Mem(0); From(4)
041$b           | <D41$b(no)      | Sto(0); RegFind('^(.{1,3})'); RegMatch(1); Redo; Mem(0); From(4)
041$c           | <D41$h(no)      | Sto(0); RegFind('^(.{1,3})'); RegMatch(1); Redo; Mem(0); From(4)
D41$a           | 041$a           | If (Not (@000/7/ = 'i' Or @000/7/ = 'j' Or (@000/7/ = 'a' And @008/24/ = 'v'))) Then S; Table('041-kielikoodit.tbl'); Replace ('$x' By '$a')
D41$d           | 041$d           | If (@000(1)/7/ = 'i' Or @000/7/ = 'j' Or (@000/7/ = 'a' And @008/24/ = 'v')) Then S; Table('041-kielikoodit.tbl'); Replace ('$x' By '$d')
D41$b           | 041$b           | If (@000(1)/7/ != 'g') Then Table('041-kielikoodit.tbl'); Replace ('$x' By '$b')
D41$b           | 041$j           | If (@000(1)/7/ = 'g') Then Table('041-kielikoodit.tbl'); Replace ('$x' By '$j')
D41$h           | 041$h           | Table('041-kielikoodit.tbl'); Replace ('$x' By '$h')
#endif

042I1 | <DELI1 | S
042I2 | <DELI2 | S
042   | <DEL   | S

044I1           | 049I1           | ' '
044I2           | 049I2           | ' '
044             | 049             | S; Replace ('$c' By ' ;$c', Strict);
                                       Replace ('$d' By ' ;$d', Strict)
044$a           | 007/18-23/      | If (%007(1)/01/='m' Or %007(2)/01/='m' Or %007(3)/01/='m') Then S

045(1)I1        | 045I1           | If ((Not Exists(@045$a)) And (Not Exists(@045$b))) Then ' ' Else S
045(1)I2        | 045I2           | ' '
045$a           | 045$b           | S
045$b           | 045$c           | S
045$c           | 045$b           | 'd' + S

049I1 | <DELI1 | S
049I2 | <DELI2 | S
049   | <DEL   | S

050             | 080(new)$a      | S;
                                    Replace ('(' By '$x(');
                                    Replace ('-' By '$x-');
                                    Replace ('=' By '$x=');
                                    Replace ('"' By '$x"');
                                    Replace ('*' By '$x*')

052             | 052(new)        | S

051I1 | <DELI1 | S
051I2 | <DELI2 | S
051   | <DEL   | S

053   | 090(new)        | S

054   | 090(new)        | S

055   | 090(new)        | S

056   | 090(new)        | S

057   | 090(new)        | S

058   | 090(new)        | S

059   | 090(new)        | S

060   | 090(new)        | S

061   | 090(new)        | S

062   | 090(new)        | S

063   | 090(new)        | S

064   | 090(new)        | S

065   | 090(new)        | S

066   | 090(new)        | S

067   | 090(new)        | S

068   | 090(new)        | S

069   | 090(new)        | S

070   | 090(new)        | S

071   | 090(new)        | S

072   | 090(new)        | S

073   | 090(new)        | S

074   | 090(new)        | S

075   | 090(new)        | S

076   | 090(new)        | S

077   | 090(new)        | S

078   | 090(new)        | S

079   | 090(new)        | S


061I1 | <DELI1 | S
061I2 | <DELI2 | S
061   | <DEL   | S

068I1 | <DELI1 | S
068I2 | <DELI2 | S
068   | <DEL   | S

071I1 | <DELI1 | S
071I2 | <DELI2 | S
071   | <DEL   | S

074I1 | <DELI1 | S
074I2 | <DELI2 | S
074   | <DEL   | S

079I1 | <DELI1 | S
079I2 | <DELI2 | S
079   | <DEL   | S

080$a           | 080(new)$a      | S;
                                    Replace ('(' By '$x(');
                                    Replace ('-' By '$x-');
                                    Replace ('=' By '$x=');
                                    Replace ('"' By '$x"');
                                    Replace ('*' By '$x*')

081$a           | <AAF(new)$a(nt) | S
AAF             | 084(new)        | S + '$2kssb'

085$a           | 080(new)$a      | S;
                                    Replace ('(' By '$x(');
                                    Replace ('-' By '$x-');
                                    Replace ('=' By '$x=');
                                    Replace ('"' By '$x"');
                                    Replace ('*' By '$x*')

082I1           | 082I1           | '1'
082I2           | 082I2           | ' '
082$a           | 082$a           | S

084I1 | 084I1  | S
084I2 | 084I2  | S
084   | 084    | S; RegReplace('$5[^$]*', '')

083I1           | 050I1           | ' '
083I2           | 050I2           | '0'
083$a           | 050$a           | S

085$a           | 080(new)$a      | S;
                                    Replace ('(' By '$x(');
                                    Replace ('-' By '$x-');
                                    Replace ('=' By '$x=');
                                    Replace ('"' By '$x"');
                                    Replace ('*' By '$x*')

090             | 060(new)I1      | ' '
090             | 060(newest)I2   | '0'
090             | 060(newest)     | S

092$a           | <AAA(new)$a(nt) | S
AAA             | 084(new)        | S + '$2msc'

093$a           | <AAB(new)$a(nt) | S
AAB             | 084(new)        | S + '$2acmccs'

094$a           | <AAC(new)$a(nt) | S
AAC             | 084(new)        | S + '$2gfdc'

095$a           | <AAD(new)$a(nt) | S
AAD             | 084(new)        | S + '$2rubbk'

098$a           | <AAE(new)I1     | If (I1 = '1') Then '9' Else ' '
098$a           | <AAE(newest)I2  | I2
098$a           | <AAE(newest)$a(nt) | S
AAEI1           | 084(new)I1      | S
AAEI2           | 084(newest)I2   | S
AAE             | 084(newest)     | S + '$2ykl'

100I1           | 100I1           | If (I1=1 Or I1=2) Then '1' Else S
100I2           | 100I2           | ' '
100$a           | <E00$a          | S
100$h           | <E00$a          | + ', '+S; RegReplace('\\s*\\([^\\.]{2,} [^\\.]{2,}\\)\$', '')
100$f           | <E00$c          | S
100$c           | <E00$d          | S
100$x           | <E00$e          | Table('Funktiotermit.tbl'); RegReplace('^\\((.*)\\)\$', '\\1')
E00             | 100             | S;
                                    MoveBefore ('d', $e);
                                    MoveBefore ('c', $d);
                                    Replace ('$c' By ',$c');
                                    Replace ('$d' By ',$d');
                                    Replace ('$e' By ',$e');
                                    If (((RegFind('.*\\$(.)') < 0) Or (RegMatch(1) != '4')) And RegFind('\\.\$') < 0 And RegFind('\\-\$') < 0) S + '.'
	 
110I1           | 110I1           | If (S = '1') Then '1' Else If ((S = '2' Or S = ' ') And (RegFind(@110$a, ', ') >= 0)) Then '0' Else '2'
110I2           | 110I2           | ' '
110$p           | <E10$a          | S
110$a           | <E10$a          | If Exists($p) Then $p +'. '+S Else S  
110$c           | <E10$b          | S
110$i           | <E10$n          | '(' + S + ')'
110$k           | <E10$d          | '(' + S + ')'
110$j           | <E10$c          | '(' + S + ')'
110$f           | <E10$a          | + ' (' + S + ')'
110$x           | <E10$e          | Table ('Funktiotermit.tbl'); RegReplace('^\\((.*)\\)\$', '\\1')
E10             | 110             | If (((RegFind('.*\\$(.)') < 0) Or (RegMatch(1) != '4')) And RegFind('\\.\$') < 0 And RegFind('\\)\$') < 0) Then S + '.' Else S;
                                    Replace ('$b' By '.$b');
                                    Replace (')$d(' By ' :$d', Strict);
                                    Replace (')$c(' By ' :$c', Strict);
                                    Replace ('$e' By ',$e')

111I1           | 111I1           | If (RegFind(@111$a, ', ') >= 0) Then '0' Else '2'
111I2           | 111I2           | ' '
111$a           | <E11$a          | S
111$c           | <E11$e          | S
111$i           | <E11$n          | '(' + S + ')'
111$k           | <E11$d          | '(' + S + ')'
111$j           | <E11$c          | '(' + S + ')'
111$f           | <E11$a          | + ' (' + S + ')'
111$x           | <E11$j          | Table ('Funktiotermit.tbl'); RegReplace('^\\((.*)\\)\$', '\\1')
E11             | 111             | If (((RegFind('.*\\$(.)') < 0) Or (RegMatch(1) != '4')) And RegFind('\\.\$') < 0) Then S + '.' Else S;
                                    Replace ('$e' By '.$e');
                                    Replace (')$d(' By ' :$d', Strict);
                                    Replace (')$c(' By ' :$c', Strict);
                                    Replace ('$j' By ',$j')

210I1           | 210I1           | '1'
210I2           | 210I2           | ' '
210$a           | 210$a           | S
210$b           | 210$b           | '(' + S + ')'; Replace ('Atk-tall' By 'Elektroninen ain')
210$c           | 210$b           | + ' (' + S + ')'

222I1           | 222I1           | ' '
222I2           | 222I2           | S; Replace (' ' By '0')
222$a           | 222$a           | S
222$b           | 222$b           | '(' + S + ')'; Replace ('Atk-tallenne' By 'Elektroninen aineisto')

240I1           | 130I2           | If (Not Exists(@1??)) Then ' '
240I2           | 130I1           | If (Not Exists(@1??)) Then S; Replace (' ' By '0')
240I1           | 240I1           | If (Exists(@1??)) Then '1'
240I2           | 240I2           | If (Exists(@1??)) Then S; Replace (' ' By '0')
240$a           | <E40$a          | S
240$n           | <E40(nt)$g(1)   | If ((Not Exists(@1??)) And (RegFind('[Tt]rad.') >= 0)) Then '(Trad.)'
240$f           | <E40$m          | S
240$i           | <E40$A          | + If (D != '') Then ', ' + S Else S
240$j           | <E40$A          | + If (D != '') Then ', ' + S Else S
240$k           | <E40$A          | + If (D != '') Then ', ' + S Else S
240$m           | <E40$r          | S

240$p           | <E40$a          | + If (RegFind('[Vv]alikoima') < 0) Then ' (' + S + ')'
//2//240$p           | <E40(nt)$g(1)   | + If (RegFind('[Vv]alikoima') < 0) Then {
//2//                                      If (D != '') Then ' (' + S + ')' Else '(' + S +  //2//     //2//                                ')';
//2//                                      }           
240$g           | <E40$n          | S
240$s           | <E40$p          | If (RegFind('[Vv]alikoima') < 0) Then S
240$s           | <E40$k          | If (RegFind('[Vv]alikoima') >= 0) Then 'Valikoima'
240$t           | <E40$s          | S
240$q           | <E40$s          | S
240$u           | <E40$o          | S
240$l           | <E40$l          | S
240$p           | <E40$k          | If (RegFind('[Vv]alikoima') >= 0) Then 'Valikoima'
E40             | 130             | If (Not Exists(@1??)) Then S;
                                    Replace ('$m' By ',$m');
                                    Replace ('$r' By ',$r');
                                    Pvalimerkitys();
                                    Replace ('$s' By '.$s');
                                    Replace ('$o' By ';$o');
                                    Replace ('$l' By ',$l');
                                    Replace ('$n' By '.$n');
                                    Replace ('$A' By ',$n'); 
                                    Replace ('$k' By '.$k');
                                    RegReplaceTable('pieni-isoksi-osakentan-alussa.tbl');
                                    MoveBefore('l', $o, 'l', '', '', ',|;|.');
                                    If (RegFind('[\\)\\.\\-]\$') < 0) Then S + '.'

// Jos inputissa on 1XX-kenttä, tehdään 240:sta 240
E40             | 240             | If (Exists(@1??)) Then S;
                                    Replace ('$m' By ',$m');
                                    Replace ('$r' By ',$r');
                                    Pvalimerkitys();
                                    Replace ('$k' By '.$k');
                                    Replace ('$s' By '.$s');
                                    Replace ('$o' By ';$o');
                                    Replace ('$l' By ',$l');
                                    Replace ('$n' By '.$n');
                                    Replace ('$A' By ',$n');
                                    RegReplaceTable('pieni-isoksi-osakentan-alussa.tbl');
                                    MoveBefore('l', $o, 'l', '', '', ',|;|.');
                                    RegReplace('\\.\$', '')

241I1           | <E41I1          | S
241I2           | <E41I2          | S
241$a           | <E41$a          | S

#if (Exists(@100) Or Exists(@110) Or Exists(@111))
E41I1           | <F41I1          | If (nt=1 And (Not Exists(%240))) Then S
E41I2           | <F41I2          | If (nt=1 And (Not Exists(%240))) Then S
E41             | <F41            | If (nt=1 And (Not Exists(%240))) Then S
F41I1           | 240I1           | '1'
F41I2           | 240I2           | S; Replace (' ' By '0')
F41$a           | 240$a           | S
#endif
#if (Not (Exists(@100) Or Exists(@110) Or Exists(@111)))
E41I1           | <F41I1          | If (nt=1 And (Not Exists(%240))) Then S
E41I2           | <F41I2          | If (nt=1 And (Not Exists(%240))) Then S
E41             | <F41            | If (nt=1 And (Not Exists(%240))) Then S
F41I2           | 130I1           | S; Replace (' ' By '0')
F41I1           | 130I2           | ' '
F41$a           | 130$a           | S
#endif

E41I1           | <G41I1          | If (nt>1 Or (Exists(%240(1)))) Then S
E41I2           | <G41I2          | If (nt>1 Or (Exists(%240(1)))) Then S
E41             | <G41            | If (nt>1 Or (Exists(%240(1)))) Then S
G41I1           | 730(new)I2      | ' '
G41I2           | 730(newest)I1   | S; Replace (' ' By '0')
G41$a           | 730(newest)$a   | S + '.'


242I1           | 242I1           | '1'
242I2           | 242I2           | S; Replace (' ' By '0')
242$a           | 242$a           | If (RegFind('[\\)\\.]\$') < 0) Then S + '.' Else S;

245I1 | 245I1  | If (Exists(@100) Or Exists(@110) Or Exists(@111) Or Exists(@130)) Then '1' Else '0'
245I2 | 245I2  | S
// Aineiston yleismäärettä 245$h ei enää käytetä, sitä ei siis kopioida.
245$a            | <F45$a          | If Exists(@245$h) And Not Exists(@245$b) Then S + ' /' Else S
245$b            | <F45$b          | S
245$c            | <F45$c          | S
245$f            | <F45$f          | S
245$g            | <F45$g          | S
245$k            | <F45$k          | S
245$n            | <F45$n          | S
245$p            | <F45$p          | S
245$6            | <F45$6          | S
245$8            | <F45$8          | S
F45 | 245 | S

246I1            | 246I1           | S
246I2            | 246I2           | S
246$a            | <G46$a          | If Exists(@246$h) And Not Exists(@246$b) Then S + ' /' Else S
246$b            | <G46$b          | S
246$f            | <G46$f          | S
246$g            | <G46$g          | S
246$i            | <G46$i          | S
246$n            | <G46$n          | S
246$p            | <G46$p          | S
246$6            | <G46$6          | S
246$8            | <G46$8          | S
G46 | 246 | S

247I1            | 247I1           | S
247I2            | 247I2           | S
247$a            | <K47$a          | If Exists(@247$h) And Not Exists(@247$b) Then S + ' /' Else S
247$b            | <K47$b          | S
247$f            | <K47$f          | S
247$g            | <K47$g          | S
247$n            | <K47$n          | S
247$p            | <K47$p          | S
247$x            | <K47$x          | S
247$6            | <K47$6          | S
247$8            | <K47$8          | S
K47 | 247 | S
			
249I1 | <DELI1 | S
249I2 | <DELI2 | S
249   | <DEL   | S

250I1 | 250I1 | S
250I2 | 250I2 | S
250   | 250   | KAANNOKSET

#if (Not Exists(@773))
260I1 | 260I1 | S
260I2 | 260I2 | S
260$a | 260$a | S; RegReplace('S\\.\\s*[Ll]\\.', 'Kustannuspaikka tuntematon');
                   RegReplace('[Ss]\\.\\s*[Ll]\\.', 'kustannuspaikka tuntematon');
                   RegReplace('[Ss]\\.\\s*[Nn]\\.', 'kustantaja tuntematon')
260$b | 260$b | S; RegReplace('[Ss]\\.\\s*[Nn]\\.', 'kustantaja tuntematon')
260$c | 260$c | S; RegReplace('[Ss]\\.\\s*[Aa]\\.*', 'julkaisuaika tuntematon')
260$? | 260$? | S
#endif

#if (Exists(@773))
260I1 | 260I1 | S
260I2 | 260I2 | S
260   | 260   | S
#endif

261I1 | <DELI1 | S
261I2 | <DELI2 | S
261   | <DEL   | S

262I1 | <DELI1 | S
262I2 | <DELI2 | S
262   | <DEL   | S

300I1 | 300I1  | S
300I2 | 300I2  | S
300   | 300    | KAANNOKSET; Delete('.', At Ending)

// OLEMASSA OLEVIEN 336- JA 337-KENTTIEN KÄÄNTÄMINEN, $b- JA $2-OSAKENTTIEN LUOMINEN

336I1 | 336I1 | S
336I2 | 336I2 | S

// Toistuvat 336$a-osakentät pilkotaan erillisiin 336-kenttiin. Mahdollinen $8 kopioidaan $a-osakentän mukaan. 
336   | <T36 | S
T36(ns)$a | 336(n)$a | Delete('.', At Ending); \
                       Delete(',', At Ending); \
                       Table ('336_a.tbl')
#if (Exists(T36$8))
T36(ns)$a | 336(n)$8 | T36$8
#endif

T36   | <DEL  | S

#if Not (Exists(@336$b))
336(ns)$a | 336(no)$b | Delete('.', At Ending); Delete(';', At Ending); If (InTable(S, '336_b.tbl')) Then Table ('336_b.tbl')
336$a | 336(no)$2 | 'rdacontent'
#endif

#if (Exists(@336$b))
336$b | 336$b | S
336$a | 336(no)$2 | 'rdacontent'
#endif

336(ns)$a | 336(n) | Sort('8ab2')

337I1 | 337I1 | S
337I2 | 337I2 | S
337$a | 337$a | Table ('337_a.tbl')

#if Not (Exists(@337$b))
337$a | 337$b | If (InTable(S, '337_b.tbl')) Then Table ('337_b.tbl')
337$a | 337$2 | 'rdamedia'
#endif

#if (Exists(@337$b))
337$b | 337$b | S
337$2 | 337$2 | S
#endif

337$8 | 337$8 | S

// LUODAAN 338-KENTÄT, JOS NIITÄ EI OLE TIETUEESSA VALMIINA

// 338-kenttiä voi olla useampia esim. moniviestimissä. Samanmuotoiset kentät luovat säännöt on ryhmitelty peräkkäin.
// Kahta samansisältöistä kenttää ei luoda missään tilanteessa.

// NIDE

#if (Not Exists(@338)) \
  And (Not Exists(@773)) \
  And ( ( @000/7/ = 'a' Or @000/7/ = 'c' Or @000/7/ = 'e' Or @000/7/ = 't') And \
          ( \
            ( (RegFind(@336(1)$a, 'eksti') >= 0) Or \
              (RegFind(@336(2)$a, 'eksti') >= 0) Or \
              (RegFind(@336(3)$a, 'eksti') >= 0) Or \
              (RegFind(@336(4)$a, 'eksti') >= 0) Or \
              (RegFind(@336$a, 'notatoitu') >= 0 ) ) And \
            ( (RegFind(@337(1)$a, 'laitetta') >= 0) Or \
              (RegFind(@337(2)$a, 'laitetta') >= 0) Or \
              (RegFind(@337(3)$a, 'laitetta') >= 0) Or \
              (RegFind(@337(4)$a, 'laitetta') >= 0) ) \
          ) \
        Or (RegFind(@300$a, '[Tt]ekstivihko|\\b[Kk]irja|[Kk]artasto') >= 0) \
        Or (RegFind(%336$a, 'Kartografinen') >=0) )
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'nide'
000 | 338(newest)$b | 'nc'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// VIDEOKASETTI

#if (Not Exists(@338)) And If (RegFind(@300$a, '[Vv]ideokas') >= 0) And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'videokasetti'
000 | 338(newest)$b | 'vf'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// PIIRTOHEITINKALVO

#if (Not Exists(@338)) And If (RegFind(@300$a, '[Hh]eijastuskuva|[Kk]alvo') >= 0) And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'piirtoheitinkalvo'
000 | 338(newest)$b | 'gt'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// DIA

#if (Not Exists(@338)) \
     And If ( (RegFind(@300$a, '[Kk]uultokuv|[Dd]iaa') >= 0) Or (RegFind(@245$h, '[Dd]ia') >= 0) ) \
     And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'dia'
000 | 338(newest)$b | 'gs'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// MIKROKORTTI

#if (Not Exists(@338)) \
    And ( \
      (RegFind(@300$a, '[Mm]ikrokortti') >= 0) Or (RegFind(@500$a, 'filmikortt') >= 0) \
        Or (007/1-2/ = 'hg') Or (007/1-2/ = 'he') \
        Or (008/24/ = 'b') \
        Or (008/24/ = 'c') \
        ) \
    And (Not (000/7/ = 'e') Or (000/7/ = 'f')) \
    And (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'mikrokortti'
000 | 338(newest)$b | 'he'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// KORTTI

#if (Not Exists(@338)) And If (RegFind(@300$a, '\\b[Kk]ortti') >= 0) And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'kortti'
000 | 338(newest)$b | 'no'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// ARKKI

#if (Not Exists(@338)) \
  And (Not Exists(@773)) \
  And ( (RegFind(@300$a, '[Aa]rkki|1 kartta') >= 0) Or \
        ( (RegFind(@336$a, 'kartograf') >= 0) And (RegFind(@337$a, 'laitetta') >= 0) ) )
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'arkki'
000 | 338(newest)$b | 'nb'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// MIKROFILMIRULLA

#if (Not Exists(@338)) \
  And ( (RegFind(@300$a, '[Mm]ikrofilmi') >= 0) Or (007/1-2/ = 'hj') Or (008/24/ = 'a')) \
  And (Not (000/7/ = 'e') Or (000/7/ = 'f')) \
  And (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'mikrofilmirulla'
000 | 338(newest)$b | 'hj'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// ÄÄNIKELA

#if (Not Exists(@338)) And If (RegFind(@300$a, '[Ää]änikela') >= 0) And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'äänikela'
000 | 338(newest)$b | 'st'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// MUU

#if (Not Exists(@338)) And (Not Exists(@773)) \
  And ( \
    (RegFind(@300, '[Tt]aulu\\b|[Uu][Ss][Bb]-muisti|[Oo]ptinen levy|[Ll]evyke|[Dd]isketti|[Oo]petuskuva') >= 0) \
    Or ( (RegFind(@337$a, 'useita v') >= 0) And (RegFind(@336$a, 'useita') >= 0) ) \
   )
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'muu'
000 | 338(newest)$b | 'nz'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// VERKKOAINEISTO

#if (Not Exists(@338)) \
  And (RegFind(@300$a, 'ROM') < 0) \
  And ( \
    (RegFind(@300$a, '[Vv]erkkojulkaisu|[Tt]iedosto') >= 0) \
    Or (RegFind(@516$a, '[Vv]erkkoaineisto') >= 0) \
    Or (RegFind(@500, '[Ii]nternet-julkaisu') >= 0) \
    Or (RegFind(@538$a, '[Ii]nternet|[Ww][Ww][Ww]|selain|[Aa]dobe|[Vv]iewer') >= 0) \
    Or (RegFind(@256$a, '[Vv]erkkoaineisto') >= 0) \
    Or (RegFind(@245$h, 'electronic') >= 0) \
    Or ( (RegFind(@300, '[Ii][Bb]ooks|[Ff][Ll][Aa][Cc]|[Hh][Tt][Mm][Ll]|online') >= 0) And (@008/24/ = 'o') ) \
    Or (RegFind(@256, '[Vv]erkko|[Ss]uorakäyttöjärjestelmä') >= 0) \
    Or (RegFind(@020, '[Pp][Dd][Ff]') >= 0) \
    Or (RegFind(@336, 'eksti') >= 0) \
  )
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'verkkoaineisto'
000 | 338(newest)$b | 'cr'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// ÄÄNILEVY

#if (Not Exists(@338)) \
  And ( (RegFind(@300, '[Cc][Dd]-levy|(CD)(.*)nilevy|sound disc|audio disc|CD audio|compact disc') >= 0) ) \
  And (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'äänilevy'
000 | 338(newest)$b | 'sd'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// ÄÄNIKASETTI

#if (Not Exists(@338)) \
  And If ( \
  (RegFind(@300$a, '[Cc]-kas') >= 0) \
  Or (RegFind(@300$a, '[Dd][Aa][Tt]-kase|[Dd][Cc][Cc]-kas|nikas|kasettia') >= 0) \
  Or (RegFind(@300$e, '[Dd][Aa][Tt]-kase|[Dd][Cc][Cc]-kas|nikas|kasettia') >= 0) \
  ) \
  And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'äänikasetti'
000 | 338(newest)$b | 'ss'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// TIETOLEVY

#if (RegFind(@300$a,  '[Rr][Oo][Mm]|[Bb]lu-') >= 0) \
  And (Not Exists(@773)) \
  And (Not Exists(@338)) \
  And (InTable(@336$a, '336_a.tbl'))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'tietolevy'
000 | 338(newest)$b | 'cd'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// VIDEOLEVY

#if (Not Exists(@338)) And If (RegFind(@300$a, '[Dd][Vv][Dd]-levy|[Vv]ideolevy|ideodisc') >= 0) And If (Not Exists(@773))
000 | 338(new)I1 | ' '
000 | 338(newest)I2 | ' '
000 | 338(newest)$a | 'videolevy'
000 | 338(newest)$b | 'vd'
000 | 338(newest)$2 | 'rdacarrier'
#endif

// 338-KENTTIEN LUOMINEN LOPPUU

#if (Exists(@338))
338I1 | 338I1 | S
338I2 | 338I2 | S
338$a | 338$a | Table ('338_a.tbl')
338$a | 338$b | If (InTable(S, '338_b.tbl')) Then Table ('338_b.tbl')
338$b | 338$b | If (Not Exists(%338$b)) Then S
338$2 | 338$2 | 'rdacarrier'
#endif

350I1 | <DELI1 | S
350I2 | <DELI2 | S
350   | <DEL   | S

400I1 | <DELI1 | S
400I2 | <DELI2 | S
400   | <DEL   | S

410I1 | <DELI1 | S
410I2 | <DELI2 | S
410   | <DEL   | S

410I1 | 490(new)I1     | '1'
410I2 | 490(newest)I2  | ' '
410   | 490(newest)    | S;
                         MoveLast('l');
                         MoveLast('x');
                         MoveLast('v');
                         RegReplace('[\\s\\.,:;/]*$[fg]([^$]*)', '(\\1)', 'g');
                         RegReplace('[\\s\\.,:;/]*$[bcdkt]', '. ', 'g');
                         RegReplace('[\\s\\.,:;/]*$p', ', ', 'g');
                         RegReplace('[\\s\\.,:;/]*$x', ',$x', 'g');
                         RegReplace('[\\s\\.,:;/]*$v', ' ;$v', 'g')

410I1 | 810(new)I1     | S
410I2 | 810(newest)I2  | ' '
410   | 810(newest)    | S;
                         RegReplace('[\\s\\.,:;/]*$([bcdfnt])', '.$\\1', 'g');
                         RegReplace('[\\s\\.,:;/]*$([plx])', ',$\\1', 'g');
                         RegReplace('[\\s\\.,:;/]*$g([^$]*)', '$g(\\1)', 'g');
                         RegReplace('[\\s\\.,:;/]*$v', ' ;$v', 'g')

411I1 | <DELI1 | S
411I2 | <DELI2 | S
411   | <DEL   | S

440I1 | <A40(new)I1    | '1'
440I2 | <A40(newest)I2 | ' '
440$a | <A40(newest)$a | S
440$n | <A40(newest)$n | S
440$p | <A40(newest)$p | S
440$x | <A40(newest)$x | S
440$v | <A40(newest)$v | S

A40I1 | 490(new)I1     | S
A40I2 | 490(newest)I2  | S
A40   | 490(newest)    | S;
                         RegReplace('[\\s\\.,:;/]*$n', '. ', 'g');
                         RegReplace('[\\s\\.,:;/]*$p', ', ', 'g');
                         RegReplace('[\\s\\.,:;/]*$x', ',$x', 'g');
                         RegReplace('[\\s\\.,:;/]*$v', ' ;$v', 'g')

440I1 | 830(new)I1     | S
440I2 | 830(newest)I2  | S
440   | 830(newest)    | S;
                         RegReplace('[\\s\\.,:;/]*$n', '.$n', 'g');
                         RegReplace('[\\s\\.,:;/]*$([px])', ',$\\1', 'g');
                         RegReplace('[\\s\\.,:;/]*$v', ' ;$v', 'g');
                         If (RegFind('\\.\$') < 0) S + '.'

505I1 | <B05I1  | S
505I2 | <B05I2  | S
505$? | <B05$?  | If (Sub = 'a' Or Sub = 'g' Or Sub = 'r' Or Sub = 't' Or Sub = 'u') Then S

// Näitä käytetään vain kertomaan, onko tietueessa 505$a tai 505$u
505$a | <A05$a | '*'
505$u | <A05$u | '*'

B05I1 | 505I1   | If (Exists(@A05)) Then S; Replace (' ' By '0')
B05I2 | 505I2   | If (Exists(@A05)) Then S
B05   | 505     | If (Exists(@A05)) Then S //; If ((RegFind('$u') < 0 And RegFind('[\\.\\)!]\$') < 0) Then S + '.'

B05I1 | <C05(1)I1 | If (Not Exists(@A05)) Then S
B05I2 | <C05(1)I2 | If (Not Exists(@A05)) Then S
B05   | <C05(1)   | If (Not Exists(@A05)) Then
                    {
                      If (D != '') Then
                      {
                        If (RegFind(D, '\\.\$') < 0 And RegFind(D, '.*$(.)') >= 0 And RegMatch(1) = 'r') D + '*' + S
                        Else If (RegFind(D, ';\$') < 0 And RegFind(D, '.*$(.)') >= 0 And RegMatch(1) = 't') D + ' ;' + S
                        Else D + S;
                      }
                      Else S
                    }

C05I1 | 505(new)I1    | S; Replace (' ' By '0')
C05I2 | 505(newest)I2 | S
C05   | 505(newest)   | S; If (RegFind('[\\.\\)!]\$') < 0) S + '.'

574I1 | <DELI1 | S
574I2 | <DELI2 | S
574   | <DEL   | S

575I1 | <DELI1 | S
575I2 | <DELI2 | S
575   | <DEL   | S

577I1 | <DELI1 | S
577I2 | <DELI2 | S
577   | <DEL   | S

578I1 | <DELI1 | S
578I2 | <DELI2 | S
578   | <DEL   | S

589I1 | <DELI1 | S
589I2 | <DELI2 | S
589   | <DEL   | S

590I1 | <DELI1 | S
590I2 | <DELI2 | S
590   | <DEL   | S

591I1 | <DELI1 | S
591I2 | <DELI2 | S
591   | <DEL   | S

592I1 | <DELI1 | S
592I2 | <DELI2 | S
592   | <DEL   | S

593I1 | <DELI1 | S
593I2 | <DELI2 | S
593   | <DEL   | S

594I1 | <DELI1 | S
594I2 | <DELI2 | S
594   | <DEL   | S

595I1 | <DELI1 | S
595I2 | <DELI2 | S
595   | <DEL   | S

596I1 | <DELI1 | S
596I2 | <DELI2 | S
596   | <DEL   | S

597I1 | <DELI1 | S
597I2 | <DELI2 | S
597   | <DEL   | S

598I1 | <DELI1 | S
598I2 | <DELI2 | S
598   | <DEL   | S

599I1 | <DELI1 | S
599I2 | <DELI2 | S
599   | <DEL   | S

600I1 | 600I1  | S
600I2 | 600I2  | '4'
600   | 600    | S;
                 RegReplace('$5[^$]*', '')

650I1 | 650I1  | S
650I2 | 650I2  | S
650   | 650    | S; RegReplace('$5[^$]*', '');
		 Replace ('[from old catalog]' By '')

651I1 | 651I1  | S
651I2 | 651I2  | S
651   | 651    | S; Replace ('[from old catalog]' By '')

653I1 | <DELI1 | S
653I2 | <DELI2 | S
653   | <DEL   | S

698I1 | <DELI1 | S
698I2 | <DELI2 | S
698   | <DEL   | S

700I1 | 700I1  | S
700I2 | 700I2  | S
700$e | 700$e  | Table ('Funktiotermit.tbl')
700$? | 700$?   | S;

710I1 | 710I1  | S
710I2 | 710I2  | S
710$e | 710$e  | Table ('Funktiotermit.tbl')
710$? | 710$?  | S

740I1            | 740I1           | S
740I2            | 740I2           | S
740$a            | <H40$a          | If Exists(@740$h) And Not Exists(@740$b) Then S + ' /' Else S
740$n            | <H40$n          | S
740$p            | <H40$p          | S
740$5            | <H40$5          | S
740$6            | <H40$6          | S
740$8            | <H40$8          | S
H40 | 740 | S //;
            //RegReplace('\\s*[:/=;\\.]?\\s*$h[^$]*( :| /| =| ;|\\.)', '\\1'); // Säilyttää välimerkit
            //RegReplace('\\s*[:/=;\\.]?\\s*$h[^$]*', '') // Jos välimerkki puuttuu tai on on virheellinen

741I1 | <DELI1 | S
741I2 | <DELI2 | S
741   | <DEL   | S

742I1 | <DELI1 | S
742I2 | <DELI2 | S
742   | <DEL   | S

744I1 | <DELI1 | S
744I2 | <DELI2 | S
744   | <DEL   | S
			
760I1            | 760I1           | S
760I2            | 760I2           | S
760$a            | <L60$a          | S
760$b            | <L60$b          | S
760$c            | <L60$c          | S
760$d            | <L60$d          | S
760$g            | <L60$g          | S
760$h            | <L60$h          | S
760$i            | <L60$i          | S
760$m            | <L60$m          | S
760$n            | <L60$n          | S
760$o            | <L60$o          | S
760$s            | <L60$s          | S
760$t            | <L60$t          | S
760$w            | <L60$w          | S
760$x            | <L60$x          | S
760$y            | <L60$y          | S
760$4            | <L60$4          | S
760$6            | <L60$6          | S
760$7            | <L60$7          | S
760$8            | <L60$8          | S
L60 | 760 | S

761I1 | <DELI1 | S
761I2 | <DELI2 | S
761   | <DEL   | S
			
762I1            | 762I1           | S
762I2            | 762I2           | S
762$a            | <M62$a          | S
762$b            | <M62$b          | S
762$c            | <M62$c          | S
762$d            | <M62$d          | S
762$g            | <M62$g          | S
762$h            | <M62$h          | S
762$i            | <M62$i          | S
762$m            | <M62$m          | S
762$n            | <M62$n          | S
762$o            | <M62$o          | S
762$s            | <M62$s          | S
762$t            | <M62$t          | S
762$w            | <M62$w          | S
762$x            | <M62$x          | S
762$y            | <M62$y          | S
762$4            | <M62$4          | S
762$6            | <M62$6          | S
762$7            | <M62$7          | S
762$8            | <M62$8          | S
M62 | 762 | S

765I1            | 765I1           | S
765I2            | 765I2           | S
765$a            | <N65$a          | S
765$b            | <N65$b          | S
765$c            | <N65$c          | S
765$d            | <N65$d          | S
765$g            | <N65$g          | S
765$h            | <N65$h          | S
765$i            | <N65$i          | S
765$k            | <N65$k          | S
765$m            | <N65$m          | S
765$n            | <N65$n          | S
765$o            | <N65$o          | S
765$r            | <N65$r          | S
765$s            | <N65$s          | S
765$t            | <N65$t          | S
765$u            | <N65$u          | S
765$w            | <N65$w          | S
765$x            | <N65$x          | S
765$y            | <N65$y          | S
765$z            | <N65$z          | S
765$4            | <N65$4          | S
765$6            | <N65$6          | S
765$7            | <N65$7          | S
765$8            | <N65$8          | S
N65 | 765 | S

767I1            | 767I1           | S
767I2            | 767I2           | S
767$a            | <P67$a          | S
767$b            | <P67$b          | S
767$c            | <P67$c          | S
767$d            | <P67$d          | S
767$g            | <P67$g          | S
767$h            | <P67$h          | S
767$i            | <P67$i          | S
767$k            | <P67$k          | S
767$m            | <P67$m          | S
767$n            | <P67$n          | S
767$o            | <P67$o          | S
767$r            | <P67$r          | S
767$s            | <P67$s          | S
767$t            | <P67$t          | S
767$u            | <P67$u          | S
767$w            | <P67$w          | S
767$x            | <P67$x          | S
767$y            | <P67$y          | S
767$z            | <P67$z          | S
767$4            | <P67$4          | S
767$6            | <P67$6          | S
767$7            | <P67$7          | S
767$8            | <P67$8          | S
P67 | 767 | S

770I1            | 770I1           | S
770I2            | 770I2           | S
770$a            | <Q70$a          | S
770$b            | <Q70$b          | S
770$c            | <Q70$c          | S
770$d            | <Q70$d          | S
770$g            | <Q70$g          | S
770$h            | <Q70$h          | S
770$i            | <Q70$i          | S
770$k            | <Q70$k          | S
770$m            | <Q70$m          | S
770$n            | <Q70$n          | S
770$o            | <Q70$o          | S
770$r            | <Q70$r          | S
770$s            | <Q70$s          | S
770$t            | <Q70$t          | S
770$u            | <Q70$u          | S
770$w            | <Q70$w          | S
770$x            | <Q70$x          | S
770$y            | <Q70$y          | S
770$z            | <Q70$z          | S
770$4            | <Q70$4          | S
770$6            | <Q70$6          | S
770$7            | <Q70$7          | S
770$8            | <Q70$8          | S
Q70 | 770 | S

772I1            | 772I1           | S
772I2            | 772I2           | S
772$a            | <R72$a          | S
772$b            | <R72$b          | S
772$c            | <R72$c          | S
772$d            | <R72$d          | S
772$g            | <R72$g          | S
772$h            | <R72$h          | S
772$i            | <R72$i          | S
772$k            | <R72$k          | S
772$m            | <R72$m          | S
772$n            | <R72$n          | S
772$o            | <R72$o          | S
772$r            | <R72$r          | S
772$s            | <R72$s          | S
772$t            | <R72$t          | S
772$u            | <R72$u          | S
772$w            | <R72$w          | S
772$x            | <R72$x          | S
772$y            | <R72$y          | S
772$z            | <R72$z          | S
772$4            | <R72$4          | S
772$6            | <R72$6          | S
772$7            | <R72$7          | S
772$8            | <R72$8          | S
R72 | 772 | S

773I1            | 773I1           | S
773I2            | 773I2           | S
773$a            | <J73$a          | S
773$b            | <J73$b          | S
773$d            | <J73$d          | S
773$g            | <J73$g          | S
773$h            | <J73$h          | S
773$i            | <J73$i          | S
773$k            | <J73$k          | S
773$m            | <J73$m          | S
773$n            | <J73$n          | S
773$o            | <J73$o          | S
773$p            | <J73$p          | S
773$q            | <J73$q          | S
773$r            | <J73$r          | S
773$s            | <J73$s          | S
773$t            | <J73$t          | S
773$u            | <J73$u          | S
773$w            | <J73$w          | S
773$x            | <J73$x          | S
773$y            | <J73$y          | S
773$z            | <J73$z          | S
773$3            | <J73$3          | S
773$4            | <J73$4          | S
773$6            | <J73$6          | S
773$7            | <J73$7          | S
773$8            | <J73$8          | S
J73 | 773 | S

774I1            | 774I1           | S
774I2            | 774I2           | S
774$a            | <S74$a          | S
774$b            | <S74$b          | S
774$c            | <S74$c          | S
774$d            | <S74$d          | S
774$g            | <S74$g          | S
774$h            | <S74$h          | S
774$i            | <S74$i          | S
774$k            | <S74$k          | S
774$m            | <S74$m          | S
774$n            | <S74$n          | S
774$o            | <S74$o          | S
774$r            | <S74$r          | S
774$s            | <S74$s          | S
774$t            | <S74$t          | S
774$u            | <S74$u          | S
774$w            | <S74$w          | S
774$x            | <S74$x          | S
774$y            | <S74$y          | S
774$z            | <S74$z          | S
774$4            | <S74$4          | S
774$6            | <S74$6          | S
774$7            | <S74$7          | S
774$8            | <S74$8          | S
S74 | 774 | S

775I1            | 775I1           | S
775I2            | 775I2           | S
775$a            | <T75$a          | S
775$b            | <T75$b          | S
775$c            | <T75$c          | S
775$d            | <T75$d          | S
775$e            | <T75$e          | S
775$f            | <T75$f          | S
775$g            | <T75$g          | S
775$h            | <T75$h          | S
775$i            | <T75$i          | S
775$k            | <T75$k          | S
775$m            | <T75$m          | S
775$n            | <T75$n          | S
775$o            | <T75$o          | S
775$r            | <T75$r          | S
775$s            | <T75$s          | S
775$t            | <T75$t          | S
775$u            | <T75$u          | S
775$w            | <T75$w          | S
775$x            | <T75$x          | S
775$y            | <T75$y          | S
775$z            | <T75$z          | S
775$4            | <T75$4          | S
775$6            | <T75$6          | S
775$7            | <T75$7          | S
775$8            | <T75$8          | S
T75 | 775 | S

776I1            | 776I1           | S
776I2            | 776I2           | S
776$a            | <U76$a          | S
776$b            | <U76$b          | S
776$c            | <U76$c          | S
776$d            | <U76$d          | S
776$g            | <U76$g          | S
776$h            | <U76$h          | S
776$i            | <U76$i          | S
776$k            | <U76$k          | S
776$m            | <U76$m          | S
776$n            | <U76$n          | S
776$o            | <U76$o          | S
776$r            | <U76$r          | S
776$s            | <U76$s          | S
776$t            | <U76$t          | S
776$u            | <U76$u          | S
776$w            | <U76$w          | S
776$x            | <U76$x          | S
776$y            | <U76$y          | S
776$z            | <U76$z          | S
776$4            | <U76$4          | S
776$6            | <U76$6          | S
776$7            | <U76$7          | S
776$8            | <U76$8          | S
U76 | 776 | S

777I1            | 777I1           | S
777I2            | 777I2           | S
777$a            | <V77$a          | S
777$b            | <V77$b          | S
777$c            | <V77$c          | S
777$d            | <V77$d          | S
777$g            | <V77$g          | S
777$h            | <V77$h          | S
777$i            | <V77$i          | S
777$k            | <V77$k          | S
777$m            | <V77$m          | S
777$n            | <V77$n          | S
777$o            | <V77$o          | S
777$s            | <V77$s          | S
777$t            | <V77$t          | S
777$w            | <V77$w          | S
777$x            | <V77$x          | S
777$y            | <V77$y          | S
777$4            | <V77$4          | S
777$6            | <V77$6          | S
777$7            | <V77$7          | S
777$8            | <V77$8          | S
V77 | 777 | S

780I1            | 780I1           | S
780I2            | 780I2           | S
780$a            | <A80$a          | S
780$b            | <A80$b          | S
780$c            | <A80$c          | S
780$d            | <A80$d          | S
780$g            | <A80$g          | S
780$h            | <A80$h          | S
780$i            | <A80$i          | S
780$k            | <A80$k          | S
780$m            | <A80$m          | S
780$n            | <A80$n          | S
780$o            | <A80$o          | S
780$r            | <A80$r          | S
780$s            | <A80$s          | S
780$t            | <A80$t          | S
780$u            | <A80$u          | S
780$w            | <A80$w          | S
780$x            | <A80$x          | S
780$y            | <A80$y          | S
780$z            | <A80$z          | S
780$4            | <A80$4          | S
780$6            | <A80$6          | S
780$7            | <A80$7          | S
780$8            | <A80$8          | S
A80 | 780 | S

785I1            | 785I1           | S
785I2            | 785I2           | S
785$a            | <B85$a          | S
785$b            | <B85$b          | S
785$c            | <B85$c          | S
785$d            | <B85$d          | S
785$g            | <B85$g          | S
785$h            | <B85$h          | S
785$i            | <B85$i          | S
785$k            | <B85$k          | S
785$m            | <B85$m          | S
785$n            | <B85$n          | S
785$o            | <B85$o          | S
785$r            | <B85$r          | S
785$s            | <B85$s          | S
785$t            | <B85$t          | S
785$u            | <B85$u          | S
785$w            | <B85$w          | S
785$x            | <B85$x          | S
785$y            | <B85$y          | S
785$z            | <B85$z          | S
785$4            | <B85$4          | S
785$6            | <B85$6          | S
785$7            | <B85$7          | S
785$8            | <B85$8          | S
B85 | 785 | S

786I1            | 786I1           | S
786I2            | 786I2           | S
786$a            | <C86$a          | S
786$b            | <C86$b          | S
786$c            | <C86$c          | S
786$d            | <C86$d          | S
786$g            | <C86$g          | S
786$h            | <C86$h          | S
786$i            | <C86$i          | S
786$j            | <C86$j          | S
786$k            | <C86$k          | S
786$m            | <C86$m          | S
786$n            | <C86$n          | S
786$o            | <C86$o          | S
786$p            | <C86$p          | S
786$r            | <C86$r          | S
786$s            | <C86$s          | S
786$t            | <C86$t          | S
786$u            | <C86$u          | S
786$v            | <C86$v          | S
786$w            | <C86$w          | S
786$x            | <C86$x          | S
786$y            | <C86$y          | S
786$z            | <C86$z          | S
786$4            | <C86$4          | S
786$6            | <C86$6          | S
786$7            | <C86$7          | S
786$8            | <C86$8          | S
C86 | 786 | S

787I1            | 787I1           | S
787I2            | 787I2           | S
787$a            | <E87$a          | S
787$b            | <E87$b          | S
787$c            | <E87$c          | S
787$d            | <E87$d          | S
787$g            | <E87$g          | S
787$h            | <E87$h          | S
787$i            | <E87$i          | S
787$k            | <E87$k          | S
787$m            | <E87$m          | S
787$n            | <E87$n          | S
787$o            | <E87$o          | S
787$r            | <E87$r          | S
787$s            | <E87$s          | S
787$t            | <E87$t          | S
787$u            | <E87$u          | S
787$w            | <E87$w          | S
787$x            | <E87$x          | S
787$y            | <E87$y          | S
787$z            | <E87$z          | S
787$4            | <E87$4          | S
787$6            | <E87$6          | S
787$7            | <E87$7          | S
787$8            | <E87$8          | S
E87 | 787 | S
				 
790I1 | <DELI1 | S
790I2 | <DELI2 | S
790   | <DEL   | S
				 
841I1 | <DELI1 | S
841I2 | <DELI2 | S
841   | <DEL   | S

842I1 | <DELI1 | S
842I2 | <DELI2 | S
842   | <DEL   | S

843I1 | <DELI1 | S
843I2 | <DELI2 | S
843   | <DEL   | S

844I1 | <DELI1 | S
844I2 | <DELI2 | S
844   | <DEL   | S

845I1 | <DELI1 | S
845I2 | <DELI2 | S
845   | <DEL   | S

850I1 | <DELI1 | S
850I2 | <DELI2 | S
850   | <DEL   | S

//852I1 | <DELI1 | S
//852I2 | <DELI2 | S
//852   | <DEL   | S

853I1 | <DELI1 | S
853I2 | <DELI2 | S
853   | <DEL   | S

854I1 | <DELI1 | S
854I2 | <DELI2 | S
854   | <DEL   | S

855I1 | <DELI1 | S
855I2 | <DELI2 | S
855   | <DEL   | S

858I1 | <DELI1 | S
858I2 | <DELI2 | S
858   | <DEL   | S

859I1 | <DELI1 | S
859I2 | <DELI2 | S
859   | <DEL   | S

863I1 | <DELI1 | S
863I2 | <DELI2 | S
863   | <DEL   | S

864I1 | <DELI1 | S
864I2 | <DELI2 | S
864   | <DEL   | S

865I1 | <DELI1 | S
865I2 | <DELI2 | S
865   | <DEL   | S

866I1 | <DELI1 | S
866I2 | <DELI2 | S
866   | <DEL   | S

867I1 | <DELI1 | S
867I2 | <DELI2 | S
867   | <DEL   | S

868I1 | <DELI1 | S
868I2 | <DELI2 | S
868   | <DEL   | S

876I1 | <DELI1 | S
876I2 | <DELI2 | S
876   | <DEL   | S

877I1 | <DELI1 | S
877I2 | <DELI2 | S
877   | <DEL   | S

878I1 | <DELI1 | S
878I2 | <DELI2 | S
878   | <DEL   | S

882I1 | <DELI1 | S
882I2 | <DELI2 | S
882   | <DEL   | S

886I1 | <DELI1 | S
886I2 | <DELI2 | S
886   | <DEL   | S

887I1 | <DELI1 | S
887I2 | <DELI2 | S
887   | <DEL   | S

888I1 | <DELI1 | S
888I2 | <DELI2 | S
888   | <DEL   | S

890I1 | <DELI1 | S
890I2 | <DELI2 | S
890   | <DEL   | S

899I1 | <DELI1 | S
899I2 | <DELI2 | S
899   | <DEL   | S

#if (TAG != 'DEL')
???I1           | ???I1           | S
???I2           | ???I2           | S
???             | ???             | S
#endif
